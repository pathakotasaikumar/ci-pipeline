# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# The `.rspec` file also contains a few flags that are not defaults but that
# users commonly want.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

begin
  simplecov_enabled = ENV['bamboo_simplecov_enabled'] unless ENV['bamboo_simplecov_enabled'].to_s.empty?
  simplecov_coverage = ENV['bamboo_simplecov_coverage'] unless ENV['bamboo_simplecov_coverage'].to_s.empty?

  simplecov_custom_filters = ENV['bamboo_simplecov_custom_filters'] unless ENV['bamboo_simplecov_custom_filters'].to_s.empty?

  if simplecov_enabled && simplecov_coverage

    puts "SimpleCov is on with minimum coverage of [#{simplecov_coverage}]"

    require 'simplecov'
    require 'simplecov-bamboo'

    SimpleCov.start do
      # excluding folders from SimpleCov coverage report
      add_filter '/lib/validation_specs'
      add_filter '/lib/pricing/data'
      add_filter '/lib/bin'
      add_filter '/coverage'
      add_filter '/platform'
      add_filter '/spec'
      add_filter '/test'
      add_filter '/.vagrant'
      add_filter '/Rakefile'

      # excluding additional files from SimpleCov coverage report
      # this is used by Ruby guard files while running tests continiously
      # that way we expose coverage report against one file
      if (!simplecov_custom_filters.nil?)
        simplecov_custom_filters.split(',').each do |filter|
          puts "Adding custom filter: #{filter}"
          add_filter filter
        end
      end
    end

    SimpleCov.formatters = SimpleCov::Formatter::MultiFormatter.new([
                                                                      SimpleCov::Formatter::HTMLFormatter,
                                                                      SimpleCov::Formatter::BambooFormatter,
                                                                    ])

    puts "-- SimpleCov is available. Coverage analysis will be done expecting >=[#{simplecov_coverage}%]"
    SimpleCov.minimum_coverage simplecov_coverage.to_f

  else
    puts "SimpleCove is not configured. Use ENV['bamboo_simplecov_coverage'] and ENV['bamboo_simplecov_enabled']"
  end
rescue LoadError
  puts '-- SimpleCov gem not available. skipping coverage analysis'
end

RSpec.configure do |config|
  # config.formatter = :documentation
  config.example_status_persistence_file_path = 'test/failed_tests_result_persistance.txt'
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

# The settings below are suggested to provide a good initial experience
# with RSpec, but feel free to customize to your heart's content.
=begin
  # These two settings work together to allow you to limit a spec run
  # to individual examples or groups you care about by tagging them with
  # `:focus` metadata. When nothing is tagged with `:focus`, all examples
  # get run.
  config.filter_run :focus
  config.run_all_when_everything_filtered = true

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = "spec/examples.txt"

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  #   - http://rspec.info/blog/2012/06/rspecs-new-expectation-syntax/
  #   - http://www.teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/
  #   - http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/#zero-monkey-patching-mode
  config.disable_monkey_patching!

  # This setting enables warnings. It's recommended, but in some cases may
  # be too noisy due to issues in dependencies.
  config.warnings = true

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = 'doc'
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  config.profile_examples = 10

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed
=end
end

# So that s3 is not referenced
ENV['context_storage'] = 'dummy'

# Set up dummy plan context variables
# local_pipeline_unit_testing indicates execution under unit tests
# some of tests and code base uses this flag to fail early or mock heavy calls
ENV['local_pipeline_unit_testing'] = 'true'
ENV['pipeline_log_folder'] = 'logs'
ENV['bamboo_ad_join_domain'] = 'svc-djoin'
ENV['bamboo_ad_join_user'] = 'dummy-user'
ENV['bamboo_ad_join_password'] = 'dummy-pass'
ENV['bamboo_planKey'] = "AMS01-C031S99DEV"
ENV['bamboo_shortPlanKey'] = "C031S99DEV"
ENV['bamboo_buildNumber'] = "5"
ENV['bamboo_planRepository_branchName'] = "master"
ENV['bamboo_aws_vpc_id'] = "vpc-test"
ENV['bamboo_deployment_env'] = "NonProduction"
ENV['bamboo_pipeline_bucket_name'] = "qcp-pipeline"
ENV['bamboo_asir_dynamodb_table_name'] = "qcp-asir-db"
ENV['bamboo_artefact_bucket_name'] = "qcp-pipeline-artefacts"
ENV['bamboo_ams_bucket_name'] = "bucket-ams-test"
ENV['bamboo_qda_bucket_name'] = "bucket-qda-test"
ENV['bamboo_legacy_bucket_name'] = "pipeline-artefact-store"
ENV['bamboo_lambda_artefact_bucket_name'] = "qcp-pipeline-lambda-artefacts"
ENV['bamboo_as_bucket_name'] = "bucket-as-test"
ENV['bamboo_snow_endpoint'] = "https://test-snow-endpoint"
ENV['bamboo_snow_user'] = "test-snow-user"
ENV['bamboo_snow_password'] = "test-snow-password"
ENV['bamboo_skip_alm'] = "true"

require 'rake'
load File.expand_path('../../Rakefile', __FILE__)
load File.expand_path('../../tasks/context.rake', __FILE__)
Rake::Task['context:read'].invoke
TEST_DATA_DIR = "#{BASE_DIR}/test/data"

# read shared examples
Dir["#{BASE_DIR}/spec/support/**/*.rb"].each do |file|
  require file
end

# All unit tests require yaml
require 'yaml'
