IntegrationTest:
  Input:
    ComponentName: alb
    Valid:
      Type: aws/alb
      Stage: "00-test"
      Persist: true
      IngressPoint: true

      Configuration:
        Features:
          Type: Pipeline::Features
          Properties:
            Features:
              Datadog: enabled

        LoadBalancer:
          Type: AWS::ElasticLoadBalancingV2::LoadBalancer
          Properties:
            IpAddressType: ipv4

        Listener:
          Type: AWS::ElasticLoadBalancingV2::Listener
          Properties:
            Port: 80
            Protocol: HTTP
            DefaultActions:
              - TargetGroupArn: GroupA
                Type: forward

        RuleA:
          Type: AWS::ElasticLoadBalancingV2::ListenerRule
          Properties:
            Actions:
              - Type: forward
                TargetGroupArn:
                  Ref: GroupA
            Conditions:
              - Field: path-pattern
                Values:
                  - "/autoscale-win2012/*"
            ListenerArn:
              Ref: Listener
            Priority: 1

        RuleB:
          Type: AWS::ElasticLoadBalancingV2::ListenerRule
          Properties:
            Actions:
              - Type: forward
                TargetGroupArn:
                  Ref: GroupB
            Conditions:
              - Field: path-pattern
                Values:
                  - "/autoscale-win2016/*"
            ListenerArn:
              Ref: Listener
            Priority: 2

        RuleC:
          Type: AWS::ElasticLoadBalancingV2::ListenerRule
          Properties:
            Actions:
              - Type: redirect
                RedirectConfig:
                  Host: "#{host}"
                  Path: "/#{path}"
                  Port: 443
                  Protocol: "HTTPS"
                  Query: "#{query}"
                  StatusCode: HTTP_301
            Conditions:
              - Field: path-pattern
                Values:
                  - "/redirect-action/*"
            ListenerArn:
              Ref: Listener
            Priority: 3

        GroupA:
          Type: AWS::ElasticLoadBalancingV2::TargetGroup
          Properties:
            Port: 80
            Protocol: HTTP
            HealthCheckIntervalSeconds: 60
            HealthCheckPath: "/autoscale-win2012/index.html"
            UnhealthyThresholdCount: 3

        GroupB:
          Type: AWS::ElasticLoadBalancingV2::TargetGroup
          Properties:
            Port: 80
            Protocol: HTTP
            HealthCheckIntervalSeconds: 60
            HealthCheckPath: "/autoscale-win2016/index.html"
            UnhealthyThresholdCount: 3
    ValidWithWildcard-qcpaws:
      Type: aws/alb
      Stage: "00-test"
      Persist: true
      IngressPoint: true

      Configuration:
        LoadBalancer:
          Type: AWS::ElasticLoadBalancingV2::LoadBalancer
          Properties:
            IpAddressType: ipv4

        Listener:
          Type: AWS::ElasticLoadBalancingV2::Listener
          Properties:
            Port: 80
            Protocol: HTTP
            Certificates:
               - CertificateArn: "@wildcard-qcpaws"
            DefaultActions:
              - TargetGroupArn: GroupA
                Type: forward

        RuleA:
          Type: AWS::ElasticLoadBalancingV2::ListenerRule
          Properties:
            Actions:
              - Type: forward
                TargetGroupArn:
                  Ref: GroupA
            Conditions:
              - Field: path-pattern
                Values:
                  - "/autoscale-win2012/*"
            ListenerArn:
              Ref: Listener
            Priority: 1

        RuleB:
          Type: AWS::ElasticLoadBalancingV2::ListenerRule
          Properties:
            Actions:
              - Type: forward
                TargetGroupArn:
                  Ref: GroupB
            Conditions:
              - Field: path-pattern
                Values:
                  - "/autoscale-win2016/*"
            ListenerArn:
              Ref: Listener
            Priority: 2

        GroupA:
          Type: AWS::ElasticLoadBalancingV2::TargetGroup
          Properties:
            Port: 80
            Protocol: HTTP
            HealthCheckIntervalSeconds: 60
            HealthCheckPath: "/autoscale-win2012/index.html"
            UnhealthyThresholdCount: 3

        GroupB:
          Type: AWS::ElasticLoadBalancingV2::TargetGroup
          Properties:
            Port: 80
            Protocol: HTTP
            HealthCheckIntervalSeconds: 60
            HealthCheckPath: "/autoscale-win2016/index.html"
            UnhealthyThresholdCount: 3
    Invalid:
      UnsupportedResourceType:
        Type: aws/alb
        Stage: 01-alb
        Configuration:
          NotALB:
            Type: "AWS::AmazonMQ::Broker"
      NilResourceType:
        Type: aws/alb
        Stage: 01-alb
        Configuration:
          NilType:
            Type: 
            Properties: {}
  Output:
    _template:
      Resources:
        LoadBalancer:
          Type: AWS::ElasticLoadBalancingV2::LoadBalancer
          Properties:
            IpAddressType: ipv4
            Scheme: internal
            SecurityGroups:
              - sg-123
              - sg-456
            Subnets:
              - subnet-123
            Type: application

        GroupA:
          Type: AWS::ElasticLoadBalancingV2::TargetGroup
          Properties:
            Port: 80
            Protocol: HTTP
            VpcId: vpc-123
            HealthCheckIntervalSeconds: 60
            HealthCheckPath: "/autoscale-win2012/index.html"
            UnhealthyThresholdCount: 3
            TargetType: instance

        GroupB:
          Type: AWS::ElasticLoadBalancingV2::TargetGroup
          Properties:
            Port: 80
            Protocol: HTTP
            VpcId: vpc-123
            HealthCheckIntervalSeconds: 60
            HealthCheckPath: "/autoscale-win2016/index.html"
            UnhealthyThresholdCount: 3
            TargetType: instance

        Listener:
          Type: AWS::ElasticLoadBalancingV2::Listener
          Properties:
            DefaultActions:
              - TargetGroupArn:
                  Ref: GroupA
                Type: forward
            LoadBalancerArn:
              Ref: LoadBalancer
            Port: 80
            Protocol: HTTP

        RuleA:
          Type: AWS::ElasticLoadBalancingV2::ListenerRule
          Properties:
            Actions:
              - Type: forward
                TargetGroupArn:
                  Ref: GroupA
            Conditions:
              - Field: path-pattern
                Values:
                  - "/autoscale-win2012/*"
            ListenerArn:
              Ref: Listener
            Priority: 1

        RuleB:
          Type: AWS::ElasticLoadBalancingV2::ListenerRule
          Properties:
            Actions:
              - Type: forward
                TargetGroupArn:
                  Ref: GroupB
            Conditions:
              - Field: path-pattern
                Values:
                  - "/autoscale-win2016/*"
            ListenerArn:
              Ref: Listener
            Priority: 2

        RuleC:
          Type: AWS::ElasticLoadBalancingV2::ListenerRule
          Properties:
            Actions:
              - Type: redirect
                RedirectConfig:
                  Host: "#{host}"
                  Path: "/#{path}"
                  Port: 443
                  Protocol: "HTTPS"
                  Query: "#{query}"
                  StatusCode: HTTP_301
            Conditions:
              - Field: path-pattern
                Values:
                  - "/redirect-action/*"
            ListenerArn:
              Ref: Listener
            Priority: 3
